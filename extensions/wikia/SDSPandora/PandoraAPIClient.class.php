<?php
/**
 * @author Jacek 'mech' Wozniak
 */

/*
 curl -v -H 'Accept: application/json'
	-X POST
	-d '{
	   "type":"callofduty:Character-v ",
	   "schema:name":"test video",
	   "schema:url":"http://sds.wikia.com/videos/123798"
	 }'
    http://localhost:9292/api/v0.1/structured-data
*/
class PandoraAPIClient extends WikiaObject {

	protected $baseUrl = null;
	protected $apiPath = null;

	public function __construct($baseUrl, $apiPath) {
		parent::__construct();
		$this->baseUrl = $baseUrl;
		$this->apiPath = $apiPath;
	}

	/**
	 * Generate object address
	 * @param $objectShortId - object id that's unique in the collection, for articles this should be articleId
	 * @param null $collection - optional, collection name, defaults to current wiki
	 * @return string sds object address
	 */
	public function getObjectUrl( $objectShortId, $collection = null ) {
		if ( !$collection ) $collection = $this->wg->DBname;
		return $this->baseUrl . $this->apiPath . rawurlencode( strtolower( $collection ) ) . '/' . rawurlencode( strtolower( $objectShortId ) );
	}

	/**
	 * Generate collection address
	 * @param null $collection - collection name, defaults to current wiki
	 * @return string sds collection address
	 */
	public function getCollectionUrl( $collection = null ) {
		if ( !$collection ) $collection = $this->wg->DBname;
		return $this->baseUrl . $this->apiPath . rawurlencode( strtolower( $collection ) );
	}

	private function isValidResponse($response) {
		if(!isset($response->error)) {
			return $response;
		}
		else {
			throw new WikiaException('SD API Error: ' . $response->error . ( !empty($response->message) ? ( ' - ' . $response->message ) : '' ) );
		}
	}

	/**
	 * Make a call to SDS to fetch an object.
	 * @param $url - sds object address (from object's id or generated with  getObjectUrl method)
	 * @return SDS response in JSON format
	 */
	public function getObject( $url ) {
		return $this->call( $url );
		return $this->isValidResponse($response);
	}

	/**
	 * Make a call to SDS to remove an object.
	 * @param $url - sds object address (from object's id or generated with  getObjectUrl method)
	 * @return SDS response in JSON format
	 */
	public function deleteObject( $url ) {
		$response = $this->call( $url, true, 'DELETE' );
		return $response;
	}

	/**
	 * Make a call to SDS to modify an object.
	 * @param $url - sds object address (from object's id or generated with  getObjectUrl method)
	 * @return SDS response in JSON format
	 */
	public function saveObject( $url, $body ) {
		$response = $this->call( $url, true, 'PUT', $body );
		return $response;
	}

	/**
	 * Make a call to SDS to create a new object.
	 * @param $url - sds collection address generated by calling getCollectionUrl, usually it's current wiki collection
	 * @return SDS response in JSON format
	 */
	public function createObject( $url, $body ) {
		$response = $this->call( $url, true, 'POST', $body );
		return $response;
	}

	protected function call( $url, $nocache = true, $method = null, $body = null ) {
		// curl -v -H 'Accept: application/json' http://dev-adam:9292/api/v0.1/Callofduty/123
		$httpRequest = MwHttpRequest::factory( $url, array( 'method' => ( $method ) ? $method : 'GET' ) );
		if ( $body ) $httpRequest->setData( $body );
		if ( $nocache ) {
			$httpRequest->setHeader('Cache-Control', 'no-cache');
			$httpRequest->setHeader('If-Modified-Since', 'Sat, 29 Oct 1994 19:43:31 GMT'); // probably not needed
		}
		$httpRequest->setHeader( 'Accept', 'application/ld+json' );
		$status = $httpRequest->execute();
		if ( !$status->isOK() ) {
			throw new WikiaException('Invalid status ' . $status->getMessage() . ' for url ' . $url);
		}
		$response = $httpRequest->getContent();
		$decodedResponse = json_decode ( $response );
		if ( empty($decodedResponse) ) {
			throw new WikiaException('Empty JSON response from url ' . $url);
		}
		if ( isset( $response->error ) ) {
			throw new WikiaException('SD API Error: ' . $response->error . ( !empty($response->message) ? ( ' - ' . $response->message ) : '' ) );
		}
		return $response;
	}

}
