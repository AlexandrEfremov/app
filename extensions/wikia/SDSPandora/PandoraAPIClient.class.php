<?php
/**
 * @author Jacek 'mech' Wozniak
 */

/*
 curl -v -H 'Accept: application/json'
	-X POST
	-d '{
	   "type":"callofduty:Character-v ",
	   "schema:name":"test video",
	   "schema:url":"http://sds.wikia.com/videos/123798"
	 }'
    http://localhost:9292/api/v0.1/structured-data
*/
class PandoraAPIClient extends WikiaObject {

	protected $baseUrl = null;
	protected $apiPath = null;

	public function __construct($baseUrl, $apiPath) {
		parent::__construct();
		$this->baseUrl = $baseUrl;
		$this->apiPath = $apiPath;
	}

	/**
	 * Generate object address
	 * @param $objectShortId - object id that's unique in the collection, for articles this should be articleId
	 * @param null $collection - optional, collection name, defaults to current wiki
	 * @return string sds object address
	 */
	public function getObjectUrl( $objectShortId, $collection = null ) {
		if ( !$collection ) $collection = $this->wg->DBname;
		return $this->baseUrl . $this->apiPath . $collection . '/' . rawurlencode( $objectShortId );
	}

	/**
	 * Generate collection address
	 * @param null $collection - collection name, defaults to current wiki
	 * @return string sds collection address
	 */
	public function getCollectionUrl( $collection = null ) {
		if ( !$collection ) $collection = $this->wg->DBname;
		return $this->baseUrl . $this->apiPath . $collection;
	}

	/**
	 * Make a call to SDS to fetch an object.
	 * @param $url - sds object address (from object's id or generated with  getObjectUrl method)
	 * @return SDS response in JSON format
	 */
	public function getObject( $url ) {
		$response = json_decode( $this->call( $url ) );
		return $this->isValidResponse($response);
	}

	/**
	 * Make a call to SDS to remove an object.
	 * @param $url - sds object address (from object's id or generated with  getObjectUrl method)
	 * @return SDS response in JSON format
	 */
	public function deleteObject( $url ) {
		$response = json_decode( $this->call( $url, true, HTTP_REQUEST_METHOD_DELETE ) );
		return $response;
	}

	/**
	 * Make a call to SDS to modify an object.
	 * @param $url - sds object address (from object's id or generated with  getObjectUrl method)
	 * @return SDS response in JSON format
	 */
	public function saveObject( $url, $body ) {
		$response = json_decode( $this->call( $url, true, HTTP_REQUEST_METHOD_PUT, $body ) );
		return $response;
	}

	/**
	 * Make a call to SDS to create a new object.
	 * @param $url - sds collection address generated by calling getCollectionUrl, usually it's current wiki collection
	 * @return SDS response in JSON format
	 */
	public function createObject( $url, $body ) {
		$response = json_decode( $this->call( $url, true, HTTP_REQUEST_METHOD_POST, $body ) );
		return $response;
	}

}
